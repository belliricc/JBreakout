package jbreakout.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;

import javax.swing.JFrame;
import javax.swing.Timer;

import jbreakout.controller.ControllerForView;
import jbreakout.model.Level;
import jbreakout.util.Config;
import jbreakout.util.SoundPlayer;

public class GameWindow extends JFrame implements ComponentListener, ActionListener {
	
	public final static double UPDATES_PER_SECOND = Config.getInstance().getFPS();
	
	public final static double LOGICAL_LEVEL_WIDTH = Config.getInstance().getLevelLogicalWidth();
	public final static double LOGICAL_LEVEL_HEIGHT = Config.getInstance().getLevelLogicalHeight();
	
	private static GameWindow instance = null;
	
	private GamePanel gamePanel;
		
	// Scale factors.
	private double sx,sy;
	
	private Timer timer;
	
    /**
     * Creates new form GameWindow
     */
    private GameWindow() {
        initComponents();
		this.addComponentListener(this);
		this.timer = new Timer((int)(1000.0 / UPDATES_PER_SECOND), this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

    	gamePanel = new GamePanel();
    	livesLeftPanel = new LivesLeftPanel();
        sidePanel = new javax.swing.JPanel();
        playerNameLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        menuButton = new javax.swing.JButton();
        pauseResumeButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        
        
        // This is so that the foucs always grabs the user input
        menuButton.setFocusable(false);
        pauseResumeButton.setFocusable(false);
        quitButton.setFocusable(false);
        livesLeftPanel.setFocusable(false);
    	gamePanel.setFocusable(true);
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        getGamePanel().setPreferredSize(new java.awt.Dimension(800, 600));

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(getGamePanel());
        getGamePanel().setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        playerNameLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        playerNameLabel.setText("<playername>");

        scoreLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        scoreLabel.setText("Score: <score>");

        menuButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        menuButton.setText("Menu");
        menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuButtonActionPerformed(evt);
            }
        });

        pauseResumeButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        pauseResumeButton.setText("Pause/Resume");
        pauseResumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseResumeButtonActionPerformed(evt);
            }
        });

        quitButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playerNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(menuButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pauseResumeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                    .addComponent(quitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scoreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playerNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scoreLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 312, Short.MAX_VALUE)
                .addComponent(menuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseResumeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        livesLeftPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout livesLeftPanelLayout = new javax.swing.GroupLayout(livesLeftPanel);
        livesLeftPanel.setLayout(livesLeftPanelLayout);
        livesLeftPanelLayout.setHorizontalGroup(
            livesLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 260, Short.MAX_VALUE)
        );
        livesLeftPanelLayout.setVerticalGroup(
            livesLeftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(livesLeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getGamePanel(), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(getGamePanel(), javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(livesLeftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>
    
    public void setPlayerName(String name) {
    	playerNameLabel.setText(name);
    }
    
    public void setScore(int score) {
    	scoreLabel.setText("Score: "+score);
    }
    
    private void formComponentResized(java.awt.event.ComponentEvent evt) {                                      
    }

    private void pauseResumeButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        ControllerForView.getInstance().pauseResumeGame();
    }
    
    private void menuButtonActionPerformed(java.awt.event.ActionEvent evt) {                  
        if(Level.getInstance().gameIsPaused()) {
        	InGameMenuWindow.getInstance();
        	InGameMenuWindow.getInstance().setVisible(true);
        	
        	GameWindow.getInstance().setVisible(false);
        }
    } 
    
    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        if(Level.getInstance().gameIsPaused()) {
        	dispose();
        }
    } 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
                
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameWindow().setVisible(true);
            }
        });
    }
    
   
    
    public static GameWindow getInstance() {
		if (instance == null) {
			SoundPlayer.getInstance();
			instance = new GameWindow();
		}
		return instance;
	}

    // Variables declaration - do not modify                     
    private javax.swing.JPanel livesLeftPanel;
    private javax.swing.JButton menuButton;
    private javax.swing.JButton pauseResumeButton;
    private javax.swing.JLabel playerNameLabel;
    private javax.swing.JButton quitButton;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JPanel sidePanel;
    // End of variables declaration            
	
	public void startTimer() {
		this.timer.start();
	}
	
	public void stopTimer() {
		this.timer.stop();
	}
	
	public boolean isTimerRunning() {
		return this.timer.isRunning();
	}

	@Override
	public void componentResized(ComponentEvent e) {
		sx = (double)getGamePanel().getWidth() / LOGICAL_LEVEL_WIDTH;
		sy = (double)getGamePanel().getHeight() / LOGICAL_LEVEL_HEIGHT;
	}
	
	public double getSx() {
		return this.sx;
	}
	
	public double getSy() {
		return this.sy;
	}

	public GamePanel getGamePanel() {
		return gamePanel;
	}

	public javax.swing.JPanel getLivesLeftPanel() {
		return livesLeftPanel;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		ControllerForView.getInstance().nextFrame();
		gamePanel.repaint();
	}
		
	// To implement the ComponentListener interface:
	
	@Override
	public void componentMoved(ComponentEvent e) {}
	@Override
	public void componentShown(ComponentEvent e) {}
	@Override
	public void componentHidden(ComponentEvent e) {}
}
